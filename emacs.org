#+TITLE: Emacs Configuration
#+AUTHOR: Iordanis Grigoriou
#+PROPERTY: header-args:emacs-lisp :tangle ~/emacs/default/init.el

* Preface

Personal Emacs configuration based on the System Crafters' [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from Scratch]] YouTube playlist.

* Preamble

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; Adjust font sizes as required
  (defvar efs/default-font-size 100)
  (defvar efs/default-variable-font-size 120)

#+end_src

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  ;; Disable splash screen
  (setq inhibit-startup-message t)

  ;; Turn off some unneeded UI elements
  (menu-bar-mode -1)   ; disable menubar
  (tool-bar-mode -1)   ; disable toolbar
  (scroll-bar-mode -1) ; disable visible scrollbar
  (tooltip-mode -1)    ; disable tooltips
  (set-fringe-mode 10) ; give some breathing space

  ;; Enable visible bell
  ;; (setq visible-bell t) ; replaced by `doom-themes-visual-bell-config`

  ;; Display column number in mode-line
  (column-number-mode)
  
  ;; Display line numbers in every buffer
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  (when (string-equal system-type "darwin")
    (setq efs/default-font-size 150)
    (setq efs/default-variable-font-size 180))

  (set-face-attribute 'default nil :font "MesloLGS NF" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "MesloLGS NF" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Open Sans" :height efs/default-variable-font-size :weight 'normal)

#+end_src

* Keybinding Configuration

Packages:
- [[https://github.com/noctuid/general.el][general.el]]
- [[https://github.com/emacs-evil/evil][evil mode]]
- [[https://github.com/emacs-evil/evil-collection][evil-collection]]
  
#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; general.el
  (use-package general
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  ;; evil
  ;; https://github.com/emacs-evil/evil
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-u-delete t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-w-delete t) ;; TODO: remote, it's set to `t` by default
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; evil-collection
  ;; https://github.com/emacs-evil/evil-collection
  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

#+end_src

* UI Configuration

** Color Theme

Packages:
- [[https://github.com/doomemacs/themes][doom-themes]]
  
#+begin_src emacs-lisp

  ;; doom-themes
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

  ;; Flash mode-line on error
  (doom-themes-visual-bell-config)

#+end_src

** Mode Line

Packages:
- [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
- [[https://github.com/emacsorphanage/anzu][anzu]]
- [[https://github.com/emacsorphanage/evil-anzu][evil-anzu]]

*Note*: the first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

Open Questions:
- Do I need both =anzu= and =evil-anzu=?
- Is there an alternative to installing two packages, just for displaying matches in the mode line?

#+begin_src emacs-lisp

  (use-package all-the-icons)

  ;; doom-modeline
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; anzu
  (use-package anzu
    :hook (after-init . global-anzu-mode)
    :diminish
    :init
    (setq anzu-mode-lighter ""))

  ;; evil-anzu
  (use-package evil-anzu
    :after (evil anzu))

#+end_src

** Which Key

Packages:
- [[https://github.com/justbur/emacs-which-key][which-key]]

  #+begin_src emacs-lisp

  ;; which-key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  #+end_src

** Ivy and Counsel

Packages:
- [[https://github.com/abo-abo/swiper][ivy]]
  
#+begin_src emacs-lisp

  ;; ivy
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; ivy-rich
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; counsel
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ;; I prefer `counsel-switch-buffer` to `counsel-ibuffer` for the preview functionality
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  ;; swiper
  (use-package swiper)

#+end_src

** Helpful Help Commands

Packages:
- [[https://github.com/Wilfred/helpful][helpful]]
  
#+begin_src emacs-lisp

  ;; helpful
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

Packages:
- [[ https://github.com/abo-abo/hydra][hydra]]

#+begin_src emacs-lisp

  ;; hydra
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode

** Better Font Faces

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Open Sans" :weight 'normal :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
    (efs/org-font-setup))

#+end_src

*** Nicer Heading Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Auto-tangle Configuration Files

*TODO*: look into [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]]

* Development

** Projectile

Packages:
- [[https://github.com/bbatsov/projectile][projectile]]
- [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
  
#+begin_src emacs-lisp

  ;; projectile
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/personal/repos")
      (setq projectile-project-search-path '("~/personal/repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; counsel-projectile
  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

Packages:
- [[https://magit.vc/][magit]]
- [[https://github.com/magit/forge][forge]]

Resources:
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting Started]]
 
#+begin_src emacs-lisp

  ;; magit
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package evil-magit
    :after magit)

  ;; forge
  (use-package forge)

#+end_src

** Rainbow Delimiters

Packages:
- [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

#+begin_src emacs-lisp

  ;; rainbow-delimiters 
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
